/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UI.Authentication;

import UI.Admin.AdminHomeUI;
import UI.InventoryManager.InventoryManagerHomeUI;
import java.io.IOException;
import javax.swing.JOptionPane;
import models.Admin;
import models.InventoryManager;
import models.User;
import state.UserSession;
import utils.Authenticator;
import utils.InputValidator;

/**
 *
 * @author Aorus
 */
public class LoginUI extends javax.swing.JFrame {

    private String username;
    private String password;
    Authenticator au = new Authenticator();
    InputValidator iv = new InputValidator();

    public LoginUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        usernameLabel = new javax.swing.JLabel();
        usernameInputField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        loginPageLabel = new javax.swing.JLabel();
        loginButton = new javax.swing.JButton();
        exitButton1 = new javax.swing.JButton();
        passwordInputField = new javax.swing.JPasswordField();
        showPasswordCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        usernameLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        usernameLabel.setText("Username:");

        usernameInputField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameInputFieldActionPerformed(evt);
            }
        });

        passwordLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        passwordLabel.setText("Password:");

        loginPageLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        loginPageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        loginPageLabel.setText("Login Page ");
        loginPageLabel.setToolTipText("");

        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        exitButton1.setText("Exit");
        exitButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButton1ActionPerformed(evt);
            }
        });

        showPasswordCheckBox.setText("Show Password");
        showPasswordCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPasswordCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(129, Short.MAX_VALUE)
                .addComponent(loginPageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(126, 126, 126))
            .addGroup(layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(loginButton)
                    .addComponent(passwordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(usernameInputField, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                    .addComponent(passwordInputField)
                    .addComponent(showPasswordCheckBox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(214, Short.MAX_VALUE)
                    .addComponent(exitButton1)
                    .addGap(106, 106, 106)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(loginPageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usernameInputField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showPasswordCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(loginButton)
                .addGap(23, 23, 23))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(249, Short.MAX_VALUE)
                    .addComponent(exitButton1)
                    .addGap(24, 24, 24)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void usernameInputFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameInputFieldActionPerformed
    }//GEN-LAST:event_usernameInputFieldActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        UserSession userState = UserSession.getInstance();
        // Get user input from text fields
        this.username = usernameInputField.getText();
        this.password = new String(passwordInputField.getPassword());

        try {
            // Validate inputs
            iv.validateNotEmpty(this.username, "Username");
            iv.validateNotEmpty(this.password, "Password");

            // Attempt login
            User user = au.login(this.username, this.password);

            System.out.println(user.getRole());

            // Check if user is null (login failed)
            if (user == null) {
                JOptionPane.showMessageDialog(this,
                        "Invalid username or password.",
                        "Login Error",
                        JOptionPane.ERROR_MESSAGE);
            } else if (user instanceof Admin) {
                Admin admin = (Admin) user;
                new AdminHomeUI(admin).setVisible(true);
                userState.setLoggedInAdmin(admin);
                this.dispose();
            } else if (user instanceof InventoryManager) {
                InventoryManager inventoryManager = (InventoryManager) user;
                userState.setLoggedInInventoryManager(inventoryManager);
                new InventoryManagerHomeUI(inventoryManager).setVisible(true);
                this.dispose();
            } else {
                user.displayUserInfo();
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this,
                    "User not found",
                    "Login Error",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (IllegalArgumentException e) {
            // Handle input validation error
            JOptionPane.showMessageDialog(this,
                    e.getMessage(), // Get the error message from the exception
                    "Input Error",
                    JOptionPane.WARNING_MESSAGE);
        } catch (IOException e) {
            // Handle IO errors during login
            JOptionPane.showMessageDialog(this,
                    "An error occurred during login: " + e.getMessage(),
                    "Login Error",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }

    }//GEN-LAST:event_loginButtonActionPerformed

    private void exitButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButton1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButton1ActionPerformed

    private void showPasswordCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPasswordCheckBoxActionPerformed
        if (showPasswordCheckBox.isSelected()) {
            // Checkbox is selected, show the password
            passwordInputField.setEchoChar((char) 0); // Set echo char to 0 to show characters
        } else {
            // Checkbox is not selected, hide the password
            passwordInputField.setEchoChar('•'); // Set echo char to the default character
        }
    }//GEN-LAST:event_showPasswordCheckBoxActionPerformed

    public static void main(String args[]) {

//        testing - purpose
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new LoginUI().setVisible(true);
//            }
//        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exitButton1;
    private javax.swing.JButton loginButton;
    private javax.swing.JLabel loginPageLabel;
    private javax.swing.JPasswordField passwordInputField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JCheckBox showPasswordCheckBox;
    private javax.swing.JTextField usernameInputField;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables
}
